//
// Generated file, do not edit! Created by opp_msgtool 6.1 from stack/phy/packet/LteAirFrame.msg.
//

#ifndef __SIMU5G_LTEAIRFRAME_M_H
#define __SIMU5G_LTEAIRFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class LteAirFrame;

}  // namespace simu5g

#include "stack/phy/packet/AirFrame_m.h" // import stack.phy.packet.AirFrame


namespace simu5g {

/**
 * Class generated from <tt>stack/phy/packet/LteAirFrame.msg:19</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is LteAirFrame.
 * //
 * packet LteAirFrame extends AirFrame
 * {
 *     \@customize(true);
 * }
 * </pre>
 *
 * LteAirFrame_Base is only useful if it gets subclassed, and LteAirFrame is derived from it.
 * The minimum code to be written for LteAirFrame is the following:
 *
 * <pre>
 * class LteAirFrame : public LteAirFrame_Base
 * {
 *   private:
 *     void copy(const LteAirFrame& other) { ... }

 *   public:
 *     LteAirFrame(const char *name=nullptr, short kind=0) : LteAirFrame_Base(name,kind) {}
 *     LteAirFrame(const LteAirFrame& other) : LteAirFrame_Base(other) {copy(other);}
 *     LteAirFrame& operator=(const LteAirFrame& other) {if (this==&other) return *this; LteAirFrame_Base::operator=(other); copy(other); return *this;}
 *     virtual LteAirFrame *dup() const override {return new LteAirFrame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from LteAirFrame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(LteAirFrame)
 * </pre>
 */
class LteAirFrame_Base : public ::simu5g::AirFrame
{
  protected:

  private:
    void copy(const LteAirFrame_Base& other);

  protected:
    bool operator==(const LteAirFrame_Base&) = delete;
    // make constructors protected to avoid instantiation
    LteAirFrame_Base(const char *name=nullptr, short kind=0);
    LteAirFrame_Base(const LteAirFrame_Base& other);
    // make assignment operator protected to force the user override it
    LteAirFrame_Base& operator=(const LteAirFrame_Base& other);

  public:
    virtual ~LteAirFrame_Base();
    virtual LteAirFrame_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class LteAirFrame");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};


}  // namespace simu5g


namespace omnetpp {

template<> inline simu5g::LteAirFrame_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::LteAirFrame_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_LTEAIRFRAME_M_H

