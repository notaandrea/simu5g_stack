//
// Generated file, do not edit! Created by opp_msgtool 6.1 from stack/d2dModeSelection/D2DModeSwitchNotification.msg.
//

#ifndef __SIMU5G_D2DMODESWITCHNOTIFICATION_M_H
#define __SIMU5G_D2DMODESWITCHNOTIFICATION_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif


namespace simu5g {

class D2DModeSwitchNotification;

}  // namespace simu5g

#include "common/LteCommonEnum_m.h" // import common.LteCommonEnum

#include "common/LteCommon_m.h" // import common.LteCommon

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace simu5g {

/**
 * Class generated from <tt>stack/d2dModeSelection/D2DModeSwitchNotification.msg:19</tt> by opp_msgtool.
 * <pre>
 * class D2DModeSwitchNotification extends inet::FieldsChunk
 * {
 *     chunkLength = inet::B(1); // TODO: size 0
 *     MacNodeId peerId;
 *     bool txSide;
 *     LteD2DMode oldMode;
 *     LteD2DMode newMode;
 *     bool oldConnection;
 *     bool interruptHarq;
 *     bool clearRlcBuffer;
 * }
 * </pre>
 */
class D2DModeSwitchNotification : public ::inet::FieldsChunk
{
  protected:
    MacNodeId peerId;
    bool txSide = false;
    LteD2DMode oldMode = static_cast<simu5g::LteD2DMode>(-1);
    LteD2DMode newMode = static_cast<simu5g::LteD2DMode>(-1);
    bool oldConnection = false;
    bool interruptHarq = false;
    bool clearRlcBuffer = false;

  private:
    void copy(const D2DModeSwitchNotification& other);

  protected:
    bool operator==(const D2DModeSwitchNotification&) = delete;

  public:
    D2DModeSwitchNotification();
    D2DModeSwitchNotification(const D2DModeSwitchNotification& other);
    virtual ~D2DModeSwitchNotification();
    D2DModeSwitchNotification& operator=(const D2DModeSwitchNotification& other);
    virtual D2DModeSwitchNotification *dup() const override {return new D2DModeSwitchNotification(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacNodeId& getPeerId() const;
    virtual MacNodeId& getPeerIdForUpdate() { handleChange();return const_cast<MacNodeId&>(const_cast<D2DModeSwitchNotification*>(this)->getPeerId());}
    virtual void setPeerId(const MacNodeId& peerId);

    virtual bool getTxSide() const;
    virtual void setTxSide(bool txSide);

    virtual LteD2DMode getOldMode() const;
    virtual void setOldMode(LteD2DMode oldMode);

    virtual LteD2DMode getNewMode() const;
    virtual void setNewMode(LteD2DMode newMode);

    virtual bool getOldConnection() const;
    virtual void setOldConnection(bool oldConnection);

    virtual bool getInterruptHarq() const;
    virtual void setInterruptHarq(bool interruptHarq);

    virtual bool getClearRlcBuffer() const;
    virtual void setClearRlcBuffer(bool clearRlcBuffer);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const D2DModeSwitchNotification& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, D2DModeSwitchNotification& obj) {obj.parsimUnpack(b);}


}  // namespace simu5g


namespace omnetpp {

template<> inline simu5g::D2DModeSwitchNotification *fromAnyPtr(any_ptr ptr) { return check_and_cast<simu5g::D2DModeSwitchNotification*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __SIMU5G_D2DMODESWITCHNOTIFICATION_M_H

